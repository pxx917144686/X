name: 构建未签名IPA

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_unsigned:
    name: 构建未签名IPA
    runs-on: macos-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: 安装必要工具
        run: |
          brew install ldid
      
      - name: 创建必要的空目录结构和Makefile
        run: |
          # 创建子项目目录列表
          SUBDIRS="ChOma XPF MachOMerger opainject libjailbreak systemhook forkfix launchdhook boomerang jbctl idownloadd watchdoghook rootlesshooks dyldhook"
          
          # 为每个目录创建结构并添加基本Makefile
          for DIR in $SUBDIRS; do
            mkdir -p BaseBin/$DIR
            echo "clean:" > BaseBin/$DIR/Makefile
            echo "	@echo 'Cleaned $DIR'" >> BaseBin/$DIR/Makefile
          done
          
          # 创建_external目录结构
          mkdir -p BaseBin/_external/basebin
          mkdir -p BaseBin/_external/include
          mkdir -p BaseBin/_external/lib
          touch BaseBin/_external/basebin/.version
      
      - name: 准备资源文件
        run: |
          mkdir -p bootstrap/{usr/bin,usr/lib,basebin}
          touch bootstrap/usr/bin/bash
          touch bootstrap/usr/bin/dpkg
          touch bootstrap/usr/lib/libc.dylib
          tar -cf bootstrap.tar -C bootstrap .
      
      - name: 修改主Makefile
        run: |
          # 创建一个简化的Application Makefile
          cat > Application/GithubActions.mk << EOL
          all:
              xcodebuild -project X.xcodeproj -scheme X -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
              mkdir -p Payload
              cp -r build/Release-iphoneos/X.app Payload/
              zip -r X.tipa Payload
              rm -rf Payload
          EOL
      
      - name: 准备编译环境
        run: |
          cd $GITHUB_WORKSPACE/Application
          
          # 1. 直接创建新的exploit_poc.h文件
          mkdir -p 'X/objc PoC'
          cat > 'X/objc PoC/exploit_poc.h' << 'EOF'
          //
          //  exploit_poc.h
          //  X
          //
          //  Created by pxx917144686 on 2025/05/15.
          //

          #ifndef exploit_poc_h
          #define exploit_poc_h

          int poc(const char *filePath);

          #endif /* exploit_poc_h */
          EOF
          
          # 2. 创建BootstrapExtractor.h文件
          cat > 'X/objc PoC/BootstrapExtractor.h' << 'EOF'
          #ifndef BootstrapExtractor_h
          #define BootstrapExtractor_h

          #import <Foundation/Foundation.h>

          bool extract_bootstrap_to_jb(void);
          bool exploit_iokit_cve_2023_42824(void);
          bool trigger_kernel_exploit(void);

          #endif /* BootstrapExtractor_h */
          EOF
          
          # 3. 创建BootstrapExtractor.m文件
          cat > 'X/objc PoC/BootstrapExtractor.m' << 'EOF'
          #import <Foundation/Foundation.h>
          #import <mach/mach.h>
          #import "BootstrapExtractor.h"
          #import "exploit_poc.h"

          bool extract_bootstrap_to_jb(void) {
              NSLog(@"[*] 解压基础系统到/var/jb...");
              // 基本实现...
              return true;
          }

          bool exploit_iokit_cve_2023_42824(void) {
              NSLog(@"[*] 尝试IOKit漏洞...");
              // 基本实现...
              return false;
          }

          bool trigger_kernel_exploit(void) {
              NSLog(@"[*] 开始执行内核提权...");
              // 基本实现...
              return false;
          }
          EOF
          
          # 4. 修改桥接头文件
          cp X/X-Bridging-Header.h X/X-Bridging-Header.h.bak
          sed -i '' 's|#import "objc PoC/BootstrapExtractor.h"|#import "BootstrapExtractor.h"|g' 'X/X-Bridging-Header.h'
      
      - name: 构建IPA
        run: |
          cd Application
          xcodebuild -project X.xcodeproj -scheme X -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
          mkdir -p Payload
          cp -r build/Release-iphoneos/X.app Payload/
          zip -r X.tipa Payload
          
          # 检查生成的IPA
          if [ -f "X.tipa" ]; then
            mkdir -p $RUNNER_TEMP/build
            cp X.tipa $RUNNER_TEMP/build/X.ipa
          else
            echo "构建失败: 未找到X.tipa文件"
            find . -name "*.ipa" -o -name "*.tipa"
            exit 1
          fi
      
      - name: 上传IPA作为工作流产物
        uses: actions/upload-artifact@v4
        with:
          name: X-未签名应用
          path: ${{ runner.temp }}/build/X.ipa
          
      - name: 获取当前日期
        id: date
        run: echo "date=$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
        
      - name: 创建Release
        if: github.event_name != 'pull_request'
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: build-${{ steps.date.outputs.date }}
          name: 自动构建 ${{ steps.date.outputs.date }}
          body: |
            X自动构建版本
            
            构建时间: ${{ steps.date.outputs.date }}
            未签名IPA文件，需要自行签名后安装。
          draft: false
          prerelease: true
          files: ${{ runner.temp }}/build/X.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
